name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:1.3.1
        env:
          SERVICES: lambda,s3,iam
          DEBUG: 1
          LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
        ports:
          - 4566:4566
        options: >-
          --name localstack
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 40
          --cpus="1.5"
          --memory="3g"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install AWS CLI and dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          pip install -r requirements.txt
          pip install awscli

      - name: Wait for LocalStack to be ready
        run: |
          echo "Waiting for LocalStack to be ready..."
          n=0
          until [ $n -ge 60 ]
          do
            echo "Attempt $n: Checking LocalStack health..."
            health=$(curl -s http://localhost:4566/_localstack/health || true)
            echo "Health response: $health"

            REQUIRED_SERVICES=(lambda s3 iam)
            SERVICES_STATUS=$(echo "$health" | jq -r '.services')

            all_services_available=true
            for service in "${REQUIRED_SERVICES[@]}"; do
              status=$(echo "$SERVICES_STATUS" | jq -r --arg svc "$service" '.[$svc]')
              if [ "$status" != "running" ] && [ "$status" != "available" ]; then
                all_services_available=false
                echo "Service $service is not ready. Status: $status"
                break
              fi
            done

            if [ "$all_services_available" = true ]; then
              echo "All required services are available."
              exit 0
            fi

            n=$((n+1))
            sleep 5
          done
          echo "LocalStack failed to start within expected time."
          exit 1

      - name: Apply Terraform configuration
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Run tests
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          pytest tests/

      - name: Clean up
        if: always()
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Dump LocalStack container logs on failure
        if: failure()
        run: |
          echo "LocalStack container logs:"
          docker logs localstack || true
